import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import 'package:gal/gal.dart'; // <-- 1. IMPORT the new package
import 'package:image_picker/image_picker.dart';
import 'package:lucide_icons/lucide_icons.dart';
import 'package:path_provider/path_provider.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

class PreviewScreen extends StatefulWidget {
  const PreviewScreen({super.key, required this.data});
  final String data;

  @override
  State<PreviewScreen> createState() => _PreviewScreenState();
}

class _PreviewScreenState extends State<PreviewScreen> {
  final _screenshotController = ScreenshotController();

  Color _foregroundColor = Colors.black;
  Color _backgroundColor = Colors.white;
  QrEyeShape _eyeShape = QrEyeShape.square;
  File? _logoImage;
  bool _isProcessing = false;

  void _showSnackbar(String message, {bool isError = false}) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? Theme.of(context).colorScheme.error : null,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  // --- 2. UPDATE THE SAVE METHOD ---
  Future<void> _saveQrCode() async {
    setState(() => _isProcessing = true);
    try {
      final Uint8List? imageBytes = await _screenshotController.capture();
      if (imageBytes == null) throw Exception('Could not capture QR code.');

      // The 'gal' package is simpler and more reliable.
      await Gal.putImageBytes(imageBytes, album: 'QRX Pro');
      _showSnackbar('QR Code saved to Gallery!');
    } catch (e) {
      _showSnackbar('An error occurred: $e', isError: true);
    } finally {
      if (mounted) {
        setState(() => _isProcessing = false);
      }
    }
  }

  // --- Other methods remain the same ---
  Future<void> _shareQrCode() async {
    setState(() => _isProcessing = true);
    try {
      final image = await _screenshotController.capture();
      if (image == null) return;
      final tempDir = await getTemporaryDirectory();
      final path = '${tempDir.path}/qrcode.png';
      await File(path).writeAsBytes(image);
      await Share.shareXFiles([XFile(path)], text: 'Generated by QRX Pro');
    } finally {
      if (mounted) setState(() => _isProcessing = false);
    }
  }

  Future<void> _pickLogoImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) setState(() => _logoImage = File(pickedFile.path));
  }

  void _pickColor(bool isForeground) {
    Color currentColor = isForeground ? _foregroundColor : _backgroundColor;
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
          isForeground ? 'Pick Foreground Color' : 'Pick Background Color',
        ),
        content: SingleChildScrollView(
          child: ColorPicker(
            pickerColor: currentColor,
            onColorChanged: (color) => currentColor = color,
          ),
        ),
        actions: [
          TextButton(
            child: const Text('Done'),
            onPressed: () {
              setState(() {
                if (isForeground) {
                  _foregroundColor = currentColor;
                } else {
                  _backgroundColor = currentColor;
                }
              });
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // This entire build method remains unchanged
    return Scaffold(
      appBar: AppBar(title: const Text('Preview & Style')),
      body: ListView(
        padding: const EdgeInsets.all(24.0),
        children: [
          Screenshot(
            controller: _screenshotController,
            child: Card(
              elevation: 2,
              color: _backgroundColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(24),
              ),
              child: Padding(
                padding: const EdgeInsets.all(20.0),
                child: QrImageView(
                  data: widget.data,
                  version: QrVersions.auto,
                  size: 250.0,
                  eyeStyle: QrEyeStyle(
                    eyeShape: _eyeShape,
                    color: _foregroundColor,
                  ),
                  dataModuleStyle: QrDataModuleStyle(color: _foregroundColor),
                  embeddedImage: _logoImage != null
                      ? FileImage(_logoImage!)
                      : null,
                  embeddedImageStyle: const QrEmbeddedImageStyle(
                    size: Size(50, 50),
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(height: 24),
          _buildStylingOptions(),
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              FilledButton.tonalIcon(
                onPressed: _isProcessing ? null : _saveQrCode,
                icon: _isProcessing
                    ? const SizedBox(
                        width: 18,
                        height: 18,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Icon(LucideIcons.download),
                label: const Text('Save'),
              ),
              const SizedBox(width: 16),
              FilledButton.tonalIcon(
                onPressed: _isProcessing ? null : _shareQrCode,
                icon: const Icon(LucideIcons.share2),
                label: const Text('Share'),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStylingOptions() {
    // This widget also remains unchanged
    return Card(
      child: ExpansionTile(
        initiallyExpanded: true,
        leading: const Icon(LucideIcons.palette),
        title: const Text('Styling Options'),
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 16.0,
              vertical: 8.0,
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                ListTile(
                  contentPadding: EdgeInsets.zero,
                  title: const Text('Foreground Color'),
                  trailing: CircleAvatar(
                    backgroundColor: _foregroundColor,
                    radius: 14,
                  ),
                  onTap: () => _pickColor(true),
                ),
                ListTile(
                  contentPadding: EdgeInsets.zero,
                  title: const Text('Background Color'),
                  trailing: CircleAvatar(
                    backgroundColor: _backgroundColor,
                    radius: 14,
                  ),
                  onTap: () => _pickColor(false),
                ),
                const Divider(),
                const Padding(
                  padding: EdgeInsets.symmetric(vertical: 8.0),
                  child: Text('Eye Shape'),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    ChoiceChip(
                      label: const Text('Square'),
                      selected: _eyeShape == QrEyeShape.square,
                      onSelected: (selected) {
                        if (selected) {
                          setState(() => _eyeShape = QrEyeShape.square);
                        }
                      },
                    ),
                    ChoiceChip(
                      label: const Text('Circle'),
                      selected: _eyeShape == QrEyeShape.circle,
                      onSelected: (selected) {
                        if (selected) {
                          setState(() => _eyeShape = QrEyeShape.circle);
                        }
                      },
                    ),
                  ],
                ),
                const Divider(),
                ListTile(
                  contentPadding: EdgeInsets.zero,
                  leading: const Icon(LucideIcons.imagePlus),
                  title: const Text('Add Logo'),
                  subtitle: Text(
                    _logoImage == null ? 'No image selected' : 'Change image',
                  ),
                  trailing: _logoImage != null
                      ? IconButton(
                          icon: const Icon(
                            LucideIcons.xCircle,
                            color: Colors.red,
                          ),
                          onPressed: () => setState(() => _logoImage = null),
                        )
                      : null,
                  onTap: _pickLogoImage,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
